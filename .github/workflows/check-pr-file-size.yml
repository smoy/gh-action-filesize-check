name: Check PR File Size

on:
    workflow_call:
        inputs:
          file_size_limit_mb:
            # "Maximum allowed total size of changed files in MB"
            required: false
            default: '50'
            type: string

          large_file_allowlist:
            # "List of files to allowlist (ignore size check), one file per line"
            required: false
            default: '' # Default empty allowlist
            type: string


jobs:
  check_file_size:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        run: |
          git fetch --no-tags --prune --no-recurse-submodules --depth=$((${{ github.event.pull_request.commits }} + 1)) origin ${{ github.event.pull_request.head.sha }}
          git fetch --no-tags --prune --no-recurse-submodules --depth=10 origin ${{ github.event.pull_request.base.sha }}
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "CHANGED_FILES<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Calculate total size of changed files (excluding allowlisted)
        id: calculate-size
        env:
          FILE_SIZE_LIMIT_MB: ${{ inputs.file_size_limit_mb || 50 }} # Default limit 50MB, configurable via workflow inputs
          FILE_SIZE_allowlist: ${{ inputs.large_file_allowlist }} # Get allowlist input
        run: |
          FILE_SIZE_LIMIT_BYTES=$(( ${{ env.FILE_SIZE_LIMIT_MB }} * 1024 * 1024 )) # Convert MB to bytes
          if [ -f "$FILE_SIZE_allowlist" ]; then
            FILE_SIZE_allowlist_CONTENT=$(< "$FILE_SIZE_allowlist")
          else
            FILE_SIZE_allowlist_CONTENT=""
          fi
          TOTAL_SIZE_BYTES=0
          allowlist_FILES=(${FILE_SIZE_allowlist_CONTENT//$'\n'/ }) # Convert multiline string to array
          IFS=$'\n'
          CHANGED_FILES_MULTILINE="${{ steps.changed-files.outputs.CHANGED_FILES }}"
          CHANGED_FILES=($(echo "$CHANGED_FILES_MULTILINE")) # Important: Use command substitution with echo
          RETURN_CODE=0
          for file in "${CHANGED_FILES[@]}"; do
            if [ -n "$file" ]; then
              IS_allowlistED=false
              for allowlisted_file in "${allowlist_FILES[@]}"; do
                if [ "$file" = "$allowlisted_file" ]; then
                  IS_allowlistED=true
                  echo "File '$file' is allowlisted, skipping size check."
                  break # No need to check other allowlist entries for this file
                fi
              done
              if ! $IS_allowlistED; then

                if [ -f "$$file" ]; then
                  FILE_SIZE_BYTES=$(stat -c %s "$file")
                else
                  FILE_SIZE_BYTES=0
                fi

                if [ "$FILE_SIZE_BYTES" -gt "$FILE_SIZE_LIMIT_BYTES" ]; then
                    echo "::error title=PR File Size Exceeded:: ${file} (excluding allowlisted) (${FILE_SIZE_BYTES} bytes) exceeds the limit of ${{ env.FILE_SIZE_LIMIT_MB }} MB."
                    RETURN_CODE=1 # Fail the action
                else
                    echo "::notice title=PR File Size Check::Total size of changed files is within the limit."
                fi

              fi
            fi
          done
          exit $RETURN_CODE